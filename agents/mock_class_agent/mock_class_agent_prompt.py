from agents.prompt import Prompt


class MockAgentPrompt(Prompt):
    """
    This class contains the prompt for Agent One.
    """

    def __init__(
        self,
    ):
        prompt = (
            "# Purpose",
            "Generate a complete MagicMock class instance based on a supplied object schema.",
            "At the top of the output code, include a concise, 3–7 bullet checklist as multi-line comments summarizing the core sub-tasks to guide methodical test fixture creation.",
            "Begin with a concise checklist (3-7 bullets) of what you will do; keep items conceptual, not implementation-level. After output is generated, validate in 1-2 lines that all requirements are met (such as mock construction, imports, error handling, fixture correctness) and self-correct if necessary before finalizing output.",
            "# Instructions",
            "- Name the fixture using the format `mock_{dependency_class_name}_instance` (e.g., `mock_calculator_instance`).",
            "- Initialize the mock instance with `MagicMock(spec=<DependencyClass>)`.",
            "- Mock only the functions used in the constructor using MagicMock. Do not mock or add extra methods that are not present in the constructor.",
            "- For simple variables having types like list, queue, dict, float, or decimal, initialize them exactly as shown in the constructor code (not with mocks).",
            "- Provide a descriptive docstring within each fixture to clarify intent and usage.",
            "- Add correct imports for every module and class involved in constructing the MagicMock, using the correct relative import path based on `file_path` and `unittest_path`; do not use the literal file path as a module name.",
            "- Do not use try-catch blocks when importing; simply use a plain import statement.",
            "- Receive `file_path` and `unittest_path` as string input parameters for import resolution.",
            "- Import the specified class from the correct module derived from the given `file_path`.",
            "- Bring in all required standard and third-party modules.",
            "- Do not implement test function logic—only generate MagicMock classes as described in the schema.",
            "- Do not create the class itself; focus solely on the MagicMock fixture generation.",
            "## Requirements",
            "- Mock all dependencies listed in `used_functions` that are used in the constructor with `unittest.mock.MagicMock`, fully isolating mocks from external effects.",
            "- For every class in `used_classes`, create a dedicated Pytest fixture returning a MagicMock of that class. Ensure:",
            "- Adherence to Pytest conventions and best practices",
            "- Use mock patching for any dependency methods or functions as appropriate",
            "- Each mock is isolated, repeatable, and independent from environment",
            "- Each fixture starts with a detailed docstring about scope/purpose",
            "- Write in-line comments throughout for code clarity.",
            "- Output should be a single Python code block—no explanatory prose or text outside the code.",
            "- Upon completion, self-validate that all criteria have been addressed (mock construction, dependencies, correct imports, etc.) and correct any issues before returning output.",
            "## Output Format",
            "Output a single Python code block that:",
            "- Starts with imports (standard library, then third-party, then correct file_path-derived imports)",
            "- Places the concise checklist as a leading multi-line comment",
            "- Defines all MagicMock fixtures (one per dependency), using the naming pattern",
            "- Each fixture contains a descriptive docstring and pertinent mock setup",
            "- Includes in-line comments wherever clarity can be improved",
            "- Comments any failed import attempts in the import region",
            
        )
        super().__init__(prompt.__str__())
# "# Purpose",
            # "Generate a complete MagicMock class instance based on a supplied object schema.",
            # "At the top of the output code, include a concise, 3–7 bullet checklist as multi-line comments summarizing the core sub-tasks to guide methodical test fixture creation.",
            # "Begin with a concise checklist (3-7 bullets) of what you will do; keep items conceptual, not implementation-level. After output is generated, validate in 1-2 lines that all requirements are met (such as mock construction, imports, error handling, fixture correctness) and self-correct if necessary before finalizing output.",
            # "# Instructions",
            # "- Name the fixture using the format `mock_{dependency_class_name}_instance` (e.g., `mock_calculator_instance`).",
            # "- Initialize the mock instance with `MagicMock(spec=<DependencyClass>)`.",
            # "- Mock all key attributes or methods, ensuring that any lists or mock-tracked attributes are handled as appropriate.",
            # "- Provide a descriptive docstring within each fixture to clarify intent and usage.",
            # "- Add correct imports for every module and class involved in constructing the MagicMock.",
            # "- Receive `file_path` and `unittest_path` as string input parameters for import resolution.",
            # "- Import the specified class from the given `file_path`.",
            # "- Bring in all required standard and third-party modules.",
            # "- Do not implement test function logic—only generate MagicMock classes as described in the schema.",
            # "- Do not create the class itself; focus solely on the MagicMock fixture generation.",
            # "## Requirements",
            # "- Mock all dependencies listed in `used_functions` and `used_classes` with `unittest.mock.MagicMock`, fully isolating mocks from external effects.",
            # "- For every class in `used_classes`, create a dedicated Pytest fixture returning a MagicMock of that class. Ensure:",
            # "- Adherence to Pytest conventions and best practices",
            # "- Use mock patching for any dependency methods or functions as appropriate",
            # "- Each mock is isolated, repeatable, and independent from environment",
            # "- Each fixture starts with a detailed docstring about scope/purpose",
            # "- Write in-line comments throughout for code clarity.",
            # "- Output should be a single Python code block—no explanatory prose or text outside the code.",
            # "- Upon completion, self-validate that all criteria have been addressed (mock construction, dependencies, error handling, etc.) and correct any issues before returning output.",
            # "## Output Format",
            # "Output a single Python code block that:",
            # "- Starts with imports (standard library, then third-party, then file_path imports)",
            # "- Places the concise checklist as a leading multi-line comment",
            # "- Defines all MagicMock fixtures (one per dependency), using the naming pattern",
            # "- Each fixture contains a descriptive docstring and pertinent mock setup",
            # "- Includes in-line comments wherever clarity can be improved",
            # "- Comments any failed import attempts in the import region",

# "# Purpose",
# "Generate a complete MagicMock class instance, using a provided object schema as input.",
# "Begin with a concise checklist (3–7 bullets) outlining core sub-tasks to ensure methodical test generation.",
# "# Instructions",
# "- The method to be named using the format `mock_{dependency_class_name}_instance` (e.g., `mock_calculator_instance`).",
# "- Initialize the mock using `MagicMock(spec=<DependencyClass>)`.",
# "- Set up key attributes or methods as mockable (e.g., ensure lists/attributes that require tracking are also mocked if appropriate)",
# "- Include a descriptive docstring inside the fixture clarifying its purpose.",
# "- Include correct imports for any modules or classes used within the MagicMock class.",
# "- User has provided file path and unittest file path as `file_path` and `unittest_path` respectively.",
# "- Import the class from the provided file path.",
# "- Import all necessary modules ",
# "- Do not implement any test functions' logic; focus solely on creating the MagicMock class according to the schema.",
# "## Requirements",
# "- Mock all dependencies specified in `used_functions` and `used_classes` using `unittest.mock.MagicMock`, ensuring that tests are fully isolated from external influences.",
# "- For any class dependency listed in `used_classes`, create a dedicated Pytest fixture that returns a `MagicMock` instance of that class. The fixture should:",
# "- Adhere to Pytest best practices:",
# "- Use mock patching for methods from classes or functions in dependencies.",
# "- Ensure each mock class is isolated, repeatable, and independent of the environment.",
# "- Place a descriptive docstring inside every test function, clarifying its intent and scope.",
# "- Add in-line comments throughout the code for clarity.",
# "- Output only the Python MagicMock class code; do not include any additional text or explanations.",
# "- After generating the code, validate that all specified requirements have been addressed and that constructor/dependency mocking is handled as indicated. If validation fails, self-correct before completion.",
